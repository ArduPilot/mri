=Limitations
While MRI offers many of the features typically seen in a JTAG debugger, there are some limitations imposed by the simple fact that this debug solution runs as a monitor on the device itself.  These include:

==Hard Faults
While debugging a hard fault, the user should be careful to not attempt to access invalid memory locations from the debugger as this could lead to a double fault condition which will hard lock the device.  MRI provides GDB with a map of valid memory locations on the LPC1768 so that GDB can prevent the user from providing a completely invalid address.  However it might still be possible to issue a read from a write-only peripheral register for example, leading to a hard fault.

==UART Conflicts
MRI communicates with GDB via one of the serial ports on the mbed device.  Since MRI requires exclusive access to its serial connection, the user must make sure to not use the same serial port from within their application.  This may require the use of another serial connection between the user's PC and their mbed through something like this [[http://www.sparkfun.com/products/9717|FTDI USB to TTL serial cable.]]  Your makefile can be used to override the mbed serial pins used by MRI.  For example to switch to the UART on pins 9 and 10 of the mbed, you could add this line to your makefile:\\ \\{{{MRI_UART=MRI_UART_MBED_P9_P10}}}\\ \\
You can find all of the supported MRI_UART_* selections in the public mri/mri.h source file.

If your only contention on the serial port is for printf() output then simply calling the standard C library functions (and never trying to override the baud rate or make other method calls on a Serial object) will allow MRI to intercept the data destined to stdout and redirect it to the GDB console.

==Interrupt Priority Conflicts
MRI runs its ISRs at priority level 0 and everything else in the system should run at a lower priority if you want to to be able to debug it.  If you never call NVIC_SetPriority() to customize the priorities of your interrupt handlers then you should have no problems.  If you do make calls to this function then only use priorities lower than 0 (a value of 1 or greater.)

==Memory Resources
Unlike a JTAG debugger, MRI does run on the mbed device itself.  It doesn't use any CPU resources until a breakpoint or other debug event is encountered and you are interacting with it via GDB.  It does however take up code space in FLASH (<10k) and data space in RAM (<1300 bytes) which could have been otherwise used by your code.  //Note: These are the resource usage numbers for the current alpha build.  The RAM usage numbers should decrease by the first production release.  The FLASH numbers are unlikely to go down and are more likely to increase a bit over time as new features and/or bug fixes are made.//

==mbed Interface Chip
The mbed interface chip uses the JTAG connection to the LPC1768 to provide special (and very useful) functionality on the mbed.  The biggest feature provided is programming via the USB mass storage device.  This awesome mbed feature remains intact thanks to a recent firmware update made available from the mbed team.  There are however other runtime features such as obtaining a unique ethernet address for your mbed device and the LocalFileSystem which are disabled when you use MRI.  MRI intercepts the requests for the ethernet address and returns the address it captures from the interface chip before it is disabled.  If your program does use the LocalFileSystem module to access files on the embedded FLASH drive then they will also be intercepted by MRI.  Calls to fopen, fread, fwrite, and fseek for files in the LocalFileSystem will be redirected to GDB where they provide access to GDB's current directory on the host PC.  This does introduce a few limitations to the LocalFileSystem functionality for Debug builds:

* Slower performance since I/O is being redirected over the serial port to the gdb host computer.
* No directory enumeration support (opendir,readdir,closedir).  Calling such functions for the LocalFileSystem while running under MRI will result in stops like:
{{{
Program received signal SIGTRAP, Trace/breakpoint trap.
0x00011a00 in mbed::LocalDirHandle::readdir() ()
}}}
